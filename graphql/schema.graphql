"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    # "Find a single category by an identifying attribute."
    # category(
    #   "Search by primary key."
    #   id: ID @eq @rules(apply: ["prohibits:slug", "required_without:slug"])

    #   "Search by slug."
    #   slug: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
    # ): Category @find

    "List multiple categories."
    categories(
      "Number of items to return."
      first: Int
      "Page number."
      page: Int
      "Order by a specific column."
      orderBy: OrderByInput
    ): CategoryConnection! @field(resolver: "App\\GraphQL\\Resolvers\\CategoryResolver@categories")

    "List multiple products."
    products(
      "Number of items to return."
      first: Int
      "Page number."
      page: Int
      "Order by a specific column."
      orderBy: OrderByInput
    ): ProductConnection! @field(resolver: "App\\GraphQL\\Resolvers\\ProductResolver@products")

    "List multiple ingredients."
    ingredients(
      "Number of items to return."
      first: Int
      "Page number."
      page: Int
      "Order by a specific column."
      orderBy: OrderByInput
    ): IngredientConnection! @field(resolver: "App\\GraphQL\\Resolvers\\IngredientResolver@ingredients")
}

"Input for ordering results."
input OrderByInput {
    "Column to order by."
    column: String!
    "Order direction."
    order: OrderDirection!
}

"Order direction."
enum OrderDirection {
    ASC
    DESC
}

"Category of items in the menu."
type Category {
    "Unique primary key."
    id: ID!

    "Category name."
    name: String!

    "URL-friendly slug."
    slug: String!

    "Category description."
    description: String

    "Products in this category."
    products(
      "Order by a specific column."
      orderBy: OrderByInput
    ): [Product!]! @field(resolver: "App\\GraphQL\\Resolvers\\CategoryResolver@categoryProducts")
}

"Product in the menu."
type Product {
    "Unique primary key."
    id: ID!

    "Product name."
    name: String!

    "URL-friendly slug."
    slug: String!

    "Product description."
    description: String

    "Price in cents."
    price_in_cents: Int!

    "Sort order for display."
    sort_order: Int

    "Categories this product belongs to."
    categories: [Category!]! @belongsToMany

    "Ingredients in this product."
    ingredients: [Ingredient!]! @belongsToMany
}

"Ingredient used in products."
type Ingredient {
    "Unique primary key."
    id: ID!

    "Ingredient name."
    name: String!

    "URL-friendly slug."
    slug: String!

    "Ingredient description."
    description: String

    "Ingredient type from pivot table."
    type: String! @field(resolver: "App\\GraphQL\\Types\\IngredientType")

    "Products that use this ingredient."
    products: [Product!]! @belongsToMany
}

"Connection for categories with pagination."
type CategoryConnection {
    "List of categories."
    data: [Category!]!
    "Pagination information."
    paginatorInfo: PaginatorInfo!
}

"Connection for products with pagination."
type ProductConnection {
    "List of products."
    data: [Product!]!
    "Pagination information."
    paginatorInfo: PaginatorInfo!
}

"Connection for ingredients with pagination."
type IngredientConnection {
    "List of ingredients."
    data: [Ingredient!]!
    "Pagination information."
    paginatorInfo: PaginatorInfo!
}

"Pagination information."
type PaginatorInfo {
    "Number of items on current page."
    count: Int!
    "Current page."
    currentPage: Int!
    "First item number on current page."
    firstItem: Int
    "Has next page."
    hasMorePages: Boolean!
    "Last item number on current page."
    lastItem: Int
    "Last page."
    lastPage: Int!
    "Items per page."
    perPage: Int!
    "Total items."
    total: Int!
}
